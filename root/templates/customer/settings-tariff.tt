<link rel="stylesheet" type="text/css" href="/static/css/themes/default/style.min.css"/>
<link rel="stylesheet" type="text/css" href="/static/css/slick/slick.grid.css"/>
<link rel="stylesheet" type="text/css" href="/static/css/slick/slick.columnpicker.css"/>
<!--link rel="stylesheet" href="/static/css/smoothness/jquery-ui-1.8.16.custom.css" type="text/css"-->
<link rel="stylesheet" type="text/css" href="/static/css/grid.css"/>
<script src="/static/jquery/jstree.min.js" type="text/javascript"></script>
<script src="/static/jquery/jquery.event.drag-2.2.js"></script>
<script src="/static/js/slick/slick.core.js"></script>
<script src="/static/js/slick/slick.formatters.js"></script>
<script src="/static/js/slick/slick.editors.js"></script>
<script src="/static/js/slick/slick.grid.js"></script>
<script src="/static/js/slick/plugins/slick.cellrangedecorator.js"></script>
<script src="/static/js/slick/plugins/slick.cellrangeselector.js"></script>
<script src="/static/js/slick/plugins/slick.cellselectionmodel.js"></script>
<script src="/static/js/slick/plugins/slick.rowselectionmodel.js"></script>
<script src="/static/js/slick/plugins/slick.checkboxselectcolumn.js"></script>
<script src="/static/js/slick/controls/slick.columnpicker.js"></script>

<input type="hidden" name="data" id="data"/>
<input type="hidden" name="csid" id="csid"/>
<table style="width: 100%; height: 400px">
<tr>
<td colspan="2">
	<center>
	<div id="div_add_service" style="display:none; background-color:#F5F5F5; width: 870px; border: solid 1px; border-color: #d3d3d3">
		<table>
			<tr>
				<td style="padding-left: 20px; align: center; width: 100%"">
					<table style="width: 100%">
						<tr>
							<td>
								<input type="button" value="Add Selected Services" onclick="doAddSelectedServices();"/>
								<input type="button" value="Cancel" onclick="$('#div_add_service').slideUp('slow');"/>
							</td>
							<td style="text-align: right; padding-right: 27px">
								<h3>Select and add services</h3>
							</td>
						</tr>
					</table>
				</td>
			</tr>
			<tr>
				<td colspan="2" style="padding-left: 20px; padding-right: 20px; padding-bottom: 20px;"><div id="csGrid" style="width:830px; height:250px;"></div></td>
			</tr>
		</table>
	</div>
	</center>
</td>
</tr>
<tr>
	<td colspan="2" style="border-bottom: solid gray 1px;">
		<table style="width: 100%">
		<tr>
		<td style=""><label id="lbl_breadcrumb" class="breadcrumb"></label></td>
		<!--td style="width:25%; align:right">
			<div id="toolbar" class="ui-widget-header ui-corner-all" style="padding:2px;">
				<button id="btn_add_service">go to beginning</button>
				<button id="btn_delete_service">rewind</button>
				<button id="btn_update_tariff">play</button>
				<button id="btn_delete_all_rows">stop</button>
			</div>
		</td-->
		</tr>
		</table>
	</td>
</tr>
<tr>
    <td style="height: 100%; width: 20%; border-right: solid gray 1px; vertical-align: top">
		<table>
			<tr>
				<td>
					<div id="tree_operations">
						<input type="button" value="Add" onclick="addService();"/>&nbsp;
						<input type="button" value="Delete" onclick="deleteService();"/>
					</div>
				</td>
			</tr>
			<tr>
				<td><div id="services_tree"></div></td>
			</tr>
		
		</table>
    </td>
    <td style="height: 100%; width: 80%; vertical-align: top">
		<table style="height: 100%; width: 100%;  vertical-align: top">
			<tr>
				<td style="width: 100%; vertical-align: top">
					<div id="operations" style="display:none">
						<input type="button" value="Update" onclick="extractAndSubmit();"/>&nbsp;
						<input type="button" value="Delete All Rows" onclick="deleteAllTariffRows();"/>
					</div>
				</td>
			</tr>
			<tr>
				<td style="width: 100%; vertical-align: top">
					<div id="serviceIds" style="display:none">
						<label for="service_acctnum">Account Number: </label><input id="service_acctnum" type="text" style="width: 150px"/>&nbsp;<label for="service_meternum">Meter Number: </label><input id="service_meternum" type="text" style="width: 150px"/>
					</div>
				</td>
			</tr>
			<tr>
				<td style="width: 100%; vertical-align: top">
					<div id="myGrid" style="width:700px; height:400px;"></div><br>        
				</td>
			</tr>
		</table>
        
    </td>
</tr>
</table>


<script type="text/javascript">
var GRID, CSGRID, TREE, COLWIDTH;
var ISGRIDLOADED = false, ISTREELOADED = false;

function loadServicesTree() {
	//alert("loadServicesTree");
	TREE = $('#services_tree').on("changed.jstree", function (e, data) {

			if (data.node.original.hasOwnProperty('sid')) {
				ISGRIDLOADED = false;
				toggleToolbarButtons();
				$('#csid').val(data.node.id);
				getTariff(data.node.id);
			}

			//alert("DATA: " + JSON.stringify(data.node));
			var parents = data.node.parents;
			//alert(parents);
			var breadcrumbStr = $("#customername").val() + " / ";

			for (var i = 0; i < parents.length; i++) {
				var parentId = parents[i];
				if (parentId != "#") {
					//alert(JSON.stringify($("#" + parentId)));
					breadcrumbStr += $("#" + parentId).find("a").first().text() + " / ";
				}
			}
			breadcrumbStr += data.node.text;
			$('#lbl_breadcrumb').html(breadcrumbStr);

		}).jstree({
			"plugins" : ['themes', 'json_data', 'ui'],
			"core" : {
				"animation" : 0,
				"check_callback" : true,
				"themes" : {
					"classic" : true
				},
				'data' : JSON_data
			}
		});
	//alert(JSON.stringify(TREE));
	ISTREELOADED = true;
}

function getAllServices() {
	//alert("getAllServices");
	var params = 'customerid=' + $("#customerid").val();
	send_ajax_request('', 'JSON', 'settings/tariff', 'get_customer_service_list', params, function () {
		loadServicesTree();
		toggleToolbarButtons();
		$('#lbl_breadcrumb').html($("#customername").val() + " / ");
	});
}

function initToolbar() {
	/*$("#btn_add_service").button({
		text : false,
		icons : {
			primary : "ui-icon-add-service"
		}
	});
	$("#btn_delete_service").button({
		text : false,
		icons : {
			primary : "ui-icon-delete-service"
		}
	});
	$("#btn_update_tariff").button({
		text : false,
		icons : {
			primary : "ui-icon-play"
		}
	});
	$("#btn_delete_all_rows").button({
		text : false,
		icons : {
			primary : "ui-icon-play"
		}
	});*/
}

function toggleToolbarButtons() {
	if (ISTREELOADED) {
		$("#btn_add_service").prop("disabled", false);
		$("#btn_delete_service").prop("disabled", false);
	} else {
		$("#btn_add_service").prop("disabled", true);
		$("#btn_delete_service").prop("disabled", true);
	}

	if (ISGRIDLOADED) {
		$("#btn_update_tariff").prop("disabled", false);
		$("#btn_delete_all_rows").prop("disabled", false);
	} else {
		$("#btn_update_tariff").prop("disabled", true);
		$("#btn_delete_all_rows").prop("disabled", true);
	}
}

/*
	ENTRY POINT !
*/
if (!$('#services_tree').html()) {
	//alert("Loading....");
	initToolbar();
	getAllServices();
}

function doAddSelectedServices(){
	var selectedIndexes = CSGRID.getSelectedRows();
	var selectedServiceIds = [];
	jQuery.each(selectedIndexes, function (index, value) {
	  selectedServiceIds.push(CSGRID.getData()[value].serviceid);
	});
	var params = "serviceids=" + JSON.stringify(selectedServiceIds) + "&customerid="+ $("#customerid").val();
	my_ajax_request('settings/tariff/add_services', params, function () {
		if (JSON_data.status == "success") {
			showMessage(JSON_data.message);
			GRID.invalidate();
		} else {
			showMessage("Failed to update");
		}
	});
}

function loadServiceInfo() {
	//alert(JSON.stringify(JSON_data));
	$('#service_acctnum').val(JSON_data['accountnumber']);
	$('#service_meternum').val(JSON_data['meternumber']);
}

function loadGrid() {
	//alert("loadGrid");
	$('#myGrid').empty();
	var options = {
		selectable : false,
		editable : true,
		enableCellNavigation : true,
		asyncEditorLoading : false,
		autoEdit : false,
		dataItemColumnValueExtractor : getItemColumnValue
	};

	var columns = [];
	var headers = JSON_data['headers'];
	COLWIDTH = 700 / headers.length + 3;

	//Now define your buttonFormatter function
	var buttonFormatter = function (row, cell, value, columnDef, dataContext) {
		var button = "<input class='slick-deletebutton' type='button' id='" + dataContext.id + "' />";
		//the id is so that you can identify the row when the particular button is clicked
		return button;
		//Now the row will display your button
	};

	columns.push({
		id : "delCol",
		field : 'del',
		name : '',
		width : 30,
		formatter : buttonFormatter,
		editable : false
	});

	columns.push({
		id : "title_wtrange",
		name : "Wt. Range",
		field : "wtrange",
		//width : (COLWIDTH * 2) + 30,
		minWidth : 140,
		cssClass : "cell-title",
		editor : NumericRangeEditor,
		formatter : NumericRangeFormatter
	});
	columns.push({
		id : "title_mincost",
		name : "mincost",
		field : "mincost",
		maxWidth : COLWIDTH,
		cssClass : "cell-title",
		editor : RealNumberEditor
	});

	headers.forEach(function (entry) {
		columns.push({
			id : "header_" + entry,
			name : "" + entry,
			field : "" + entry,
			maxWidth : COLWIDTH,
			cssClass : "cell-title",
			editor : RealNumberEditor,
			sortable : false
		});
	});

	var data = JSON_data['rows'];

	GRID = new Slick.Grid("#myGrid", data, columns, options);
	GRID.setSelectionModel(new Slick.CellSelectionModel());
	//GRID.registerPlugin(checkboxSelector);
	var columnpicker = new Slick.Controls.ColumnPicker(columns, GRID, options);

	//Now you can use jquery to hook up your delete button event
	$('.slick-deletebutton').click(function () {
		var me = $(this),
		id = me.attr('id');
		window.confirm("Deletes are irrevocable. Do you want to delete " + id + "?");
		//assuming you have used a dataView to create your grid
		//also assuming that its variable name is called 'dataView'
		//use the following code to get the item to be deleted from it
		//dataView.deleteItem(id);
		//This is possible because in the formatter we have assigned the row id itself as the button id;
		//now assuming your grid is called 'grid'
		//grid.invalidate();
	});
	ISGRIDLOADED = true;
}

function getTariff(csid) {
	//alert("getTariff " + csid);
	var params = 'csid=' + csid;
	send_ajax_request('', 'JSON', 'settings/tariff', 'get_service_tariff', params, function () {
		loadGrid();
		loadServiceInfo();
		$('#operations').show();
		$('#serviceIds').show();
		toggleToolbarButtons();
	});
}

function extractAndSubmit() {
	if (window.confirm("Committed changes are irrevocable. Do you want to commit your changes?")) {
		//alert($('#csid').val());
		var d = GRID.getData();
		var info = {
			accountnumber : $('#service_acctnum').val(),
			meternumber : $('#service_meternum').val(),
			csid : $('#csid').val()
		};

		var params = "csid=" + $('#csid').val() + "&data=" + JSON.stringify(d) + "&info=" + JSON.stringify(info);
		my_ajax_request('settings/tariff/save', params, function () {
			if (JSON_data.status == "success") {
				showMessage(JSON_data.message);
				GRID.invalidate();
			} else {
				showMessage("Failed to update");
			}
		});
	}
}

function deleteAllTariffRows() {
	if (window.confirm("WARNING: You are about to delete ALL the tariff rows for the service. This will not delete the customer-service association. Do you want to proceed?")) {
		var d = GRID.getData();
		var params = "csid=" + $('#csid').val() + "&data=" + JSON.stringify(d);
		/*my_ajax_request('settings/tariff/deleteAllTariffRows', params, function () {
			if (JSON_data.status == "success") {
				showMessage(JSON_data.message);
				getTariff($('#csid').val());
			} else {
				showMessage("Failed to update");
			}
		});*/
	}
}

function addService() {
	var carrierNode = TREE.get_node(TREE.get_selected());
	if (carrierNode) {
		if (carrierNode.original.hasOwnProperty('sid')) {
			carrierNode = TREE.get_node(carrierNode.parent);
		}
		
		var params = "carrierid=" + carrierNode.original.id + "&customerid="+ $("#customerid").val();
		my_ajax_request('settings/tariff/get_carrier_services', params, function () {
			loadCSGrid();
			$("#div_add_service").slideDown("slow");
		});
	}else{
		showMessage("Please select a carrier");
	}
}

function deleteService() {
	if (window.confirm("WARNING: You are about to delete a customer-service association. Do you want to proceed?")) {
		//delete selected service
	}
}

function loadCSGrid(){
	$('#csGrid').empty();
	
	var options = {
		selectable: true,
		editable: false,
		enableCellNavigation: false,
		forceFitColumns: true
	};
	
	var headers = ["serviceid", "carrierid", "servicename", "international", "heavy", "servicecode"];
	var columns = [];
	
	var checkboxSelector = new Slick.CheckboxSelectColumn({
      cssClass: "slick-cell-checkboxsel"
    });
	
	columns.push(checkboxSelector.getColumnDefinition());

	
	columns.push({
		id : "header_servicename",
		name : "Service Name" ,
		field : "servicename",
		width : 500,
		cssClass : "cell-title",
		sortable : true
	});
	
	columns.push({
		id : "header_international",
		name : "International" ,
		field : "international",
		width : 100,
		cssClass : "cell-title",
		sortable : true
	});
	
	columns.push({
		id : "header_heavy",
		name : "Heavy" ,
		field : "heavy",
		width : 100,
		cssClass : "cell-title",
		sortable : true
	});
	
	columns.push({
		id : "header_servicecode",
		name : "Service Code" ,
		field : "servicecode",
		width : 100,
		cssClass : "cell-title",
		sortable : true
	});
	
	var data = JSON_data['services'];
	
	CSGRID = new Slick.Grid("#csGrid", data, columns, options);
	CSGRID.setSelectionModel(new Slick.RowSelectionModel({selectActiveRow: false}));
    CSGRID.registerPlugin(checkboxSelector);

    var columnpicker = new Slick.Controls.ColumnPicker(columns, CSGRID, options);
}

// Get the item column value using a custom 'fieldIdx' column param
function getItemColumnValue(item, column) {
	var values = item[column.field];
	if (values !== null && typeof values === 'object' && values.hasOwnProperty('actualcost')) {
		return values.actualcost;
	} else {
		return values;
	}
}

/**
RealNumberEditor
 */

function RealNumberEditor(args) {
	var $numVal;
	var scope = this;

	this.init = function () {
		$numVal = $("<INPUT type='text' class='editor-text'/>")
			.appendTo(args.container)
			.bind("keydown", scope.handleKeyDown);
		scope.focus();
	};

	this.handleKeyDown = function (e) {
		if (e.keyCode == $.ui.keyCode.LEFT || e.keyCode == $.ui.keyCode.RIGHT || e.keyCode == $.ui.keyCode.TAB) {
			e.stopImmediatePropagation();
		}
	};

	this.destroy = function () {
		$(args.container).empty();
	};

	this.focus = function () {
		$numVal.focus();
	};

	this.serializeValue = function () {
		//alert("serializeValue");
		return parseFloat($numVal.val(), 10);
	};

	this.applyValue = function (item, state) {
		//alert("applyValue " + args.column.field);
		item[args.column.field].actualcost = state;
	};

	this.loadValue = function (item) {
		$numVal.val(item[args.column.field].actualcost);
	};

	this.isValueChanged = function () {
		return args.item.actualcost != parseFloat($numVal.val(), 10);
	};

	this.validate = function () {
		if ($numVal.val().trim()) {
			if (isNaN(parseFloat($numVal.val(), 10))) {
				return {
					valid : false,
					msg : "Please type in valid numbers."
				};
			}
		}
		return {
			valid : true,
			msg : null
		};
	};

	this.init();
}

/**
NumericRangeEditor
 */

function NumericRangeEditor(args) {
	var $from,
	$to;
	var scope = this;

	this.init = function () {
		$from = $("<INPUT type=text style='width:40px' />")
			.appendTo(args.container)
			.bind("keydown", scope.handleKeyDown);

		$(args.container).append("&nbsp; to &nbsp;");

		$to = $("<INPUT type=text style='width:40px' />")
			.appendTo(args.container)
			.bind("keydown", scope.handleKeyDown);

		scope.focus();
	};

	this.handleKeyDown = function (e) {
		if (e.keyCode == $.ui.keyCode.LEFT || e.keyCode == $.ui.keyCode.RIGHT || e.keyCode == $.ui.keyCode.TAB) {
			e.stopImmediatePropagation();
		}
	};

	this.destroy = function () {
		$(args.container).empty();
	};

	this.focus = function () {
		$from.focus();
	};

	this.serializeValue = function () {
		return {
			from : parseInt($from.val(), 10),
			to : parseInt($to.val(), 10)
		};
	};

	this.applyValue = function (item, state) {
		item.wtmin = state.from;
		item.wtmax = state.to;
	};

	this.loadValue = function (item) {
		$from.val(item.wtmin);
		$to.val(item.wtmax);
	};

	this.isValueChanged = function () {
		return args.item.wtmin != parseInt($from.val(), 10) || args.item.wtmax != parseInt($from.val(), 10);
	};

	this.validate = function () {
		alert(JSON.stringify(args.item.rateids));
		if (isNaN(parseInt($from.val(), 10)) || isNaN(parseInt($to.val(), 10))) {
			return {
				valid : false,
				msg : "Please type in valid numbers."
			};
		}

		if (parseInt($from.val(), 10) > parseInt($to.val(), 10)) {
			return {
				valid : false,
				msg : "'from' cannot be greater than 'to'"
			};
		}

		var inRange = function (v, m, M) {
			return m <= v && v <= M;
		};

		var gridData = GRID.getData();
		for (var key in gridData) {
			var row = gridData[key];
			var myRowNum = args.item.rownum;
			var min = row.wtmin;
			var max = row.wtmax;

			if (myRowNum > row.rownum && inRange($from.val(), min, max)) {
				//alert("Overlapping minimum");
				return {
					valid : false,
					msg : "Overlapping minimum"
				};
			}

			if (myRowNum < row.rownum && inRange($to.val(), min, max)) {
				//alert("Overlapping maximum");
				return {
					valid : false,
					msg : "Overlapping maximum"
				};
			}

			if ($from.val() < min && $to.val() > max) {
				//alert("Range or sub-range is already defined");
				return {
					valid : false,
					msg : "Range or sub-range is already defined"
				};
			}

			if ($from.val() > min && $to.val() < max) {
				//alert("Range or super-range is already defined");
				return {
					valid : false,
					msg : "Range or super-range is already defined"
				};
			}
		}

		return {
			valid : true,
			msg : null
		};
	};

	this.init();
}

/**
NumericRangeFormatter
 */
function NumericRangeFormatter(row, cell, value, columnDef, dataContext) {
	return dataContext.wtmin + " - " + dataContext.wtmax;
}

function my_ajax_request(section_value, optional_param, call_back_function) {

	waiting_COUNT++;
	$('#preload').show();

	var data_string = "ajax=1&eventtimestamp=" + jQuery.now();

	if (optional_param)
		data_string += '&' + optional_param;

	var request_url = (section_value ? '/customer/' + section_value : '/customer/ajax');

	var charPattern = /#/g;
	if (data_string.match(charPattern)) {
		data_string = data_string.replace(charPattern, "%23");
	}

	JSON_data = null;
	$.ajax({
		type : "POST",
		url : request_url,
		data : data_string,
		//contentType : "application/json; charset=utf-8",
		dataType : 'json',
		success : function (data) {
			waiting_COUNT--;
			if (waiting_COUNT == 0)
				$('#preload').hide();
			JSON_data = data;
			if (JSON_data.error)
				showMessage("<div class='error'>" + JSON_data.error + "</div>", "Reseponse Error");

			afterSuccessCallBack("JSON", "", call_back_function);
		},
		error : function (data) {
			showMessage("An internal error has occurred, Please contact support. " + data, "Internal Server Error");
			waiting_COUNT--;
			if (waiting_COUNT == 0)
				$('#preload').hide();
		},
		complete : function (data) {
			//$('#preload').hide();
		}
	});

}
</script>